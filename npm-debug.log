0 info it worked if it ends with ok
1 verbose cli [ '/home/tahu/.nvm/v0.8.15/bin/node',
1 verbose cli   '/home/tahu/.nvm/v0.8.15/bin/npm',
1 verbose cli   'install',
1 verbose cli   '-g',
1 verbose cli   'pathcap' ]
2 info using npm@1.1.66
3 info using node@v0.8.15
4 verbose read json /home/tahu/.nvm/v0.8.15/lib/package.json
5 verbose read json /home/tahu/.nvm/v0.8.15/lib/package.json
6 verbose cache add [ 'pathcap', null ]
7 silly cache add name=undefined spec="pathcap" args=["pathcap",null]
8 verbose parsed url { pathname: 'pathcap', path: 'pathcap', href: 'pathcap' }
9 silly lockFile d83f4d62-pathcap pathcap
10 verbose lock pathcap /home/tahu/.npm/d83f4d62-pathcap.lock
11 silly lockFile d83f4d62-pathcap pathcap
12 verbose addNamed [ 'pathcap', '' ]
13 verbose addNamed [ null, '' ]
14 silly lockFile 3863aa8e-pathcap pathcap@
15 verbose lock pathcap@ /home/tahu/.npm/3863aa8e-pathcap.lock
16 silly addNameRange { name: 'pathcap', range: '', hasData: false }
17 verbose url raw pathcap
18 verbose url resolving [ 'https://registry.npmjs.org/', './pathcap' ]
19 verbose url resolved https://registry.npmjs.org/pathcap
20 info trying registry request attempt 1 at 10:17:20
21 http GET https://registry.npmjs.org/pathcap
22 http 200 https://registry.npmjs.org/pathcap
23 silly registry.get cb [ 200,
23 silly registry.get   { vary: 'Accept',
23 silly registry.get     server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',
23 silly registry.get     etag: '"A71NUHNRB30PXM43IH93QIJ26"',
23 silly registry.get     date: 'Fri, 07 Dec 2012 08:16:35 GMT',
23 silly registry.get     'content-type': 'application/json',
23 silly registry.get     'content-length': '1416' } ]
24 silly addNameRange number 2 { name: 'pathcap', range: '', hasData: true }
25 silly addNameRange versions [ 'pathcap', [ '0.0.1' ] ]
26 verbose addNamed [ 'pathcap', '0.0.1' ]
27 verbose addNamed [ '0.0.1', '0.0.1' ]
28 silly lockFile e578d432-pathcap-0-0-1 pathcap@0.0.1
29 verbose lock pathcap@0.0.1 /home/tahu/.npm/e578d432-pathcap-0-0-1.lock
30 verbose read json /home/tahu/.npm/pathcap/0.0.1/package/package.json
31 warn package.json pathcap@0.0.1 No README.md file found!
32 silly lockFile e578d432-pathcap-0-0-1 pathcap@0.0.1
33 silly lockFile 3863aa8e-pathcap pathcap@
34 silly resolved [ { name: 'pathcap',
34 silly resolved     description: 'Recursively rename directories and files to have names no longer than given number of bytes',
34 silly resolved     version: '0.0.1',
34 silly resolved     keywords: [ 'fs', 'rename', 'cap', 'file', 'filename', 'path', 'pathname' ],
34 silly resolved     homepage: 'https://jakut.is/git/PATHCAP/about/',
34 silly resolved     maintainers: [ [Object] ],
34 silly resolved     bin: { scsync: './bin/pathcap' },
34 silly resolved     contributors: [],
34 silly resolved     bugs: 'mailto:vytautas@jakut.is',
34 silly resolved     license:
34 silly resolved      { type: 'unlicense',
34 silly resolved        url: 'https://jakut.is/git/SCSYNC/plain/LICENSE' },
34 silly resolved     repository: { type: 'git', url: 'git://jakut.is/PATHCAP' },
34 silly resolved     dependencies: { async: '0.1.x', optimist: '0.3.x', trim: '0.0.x' },
34 silly resolved     main: './api.js',
34 silly resolved     engines: { node: '*' },
34 silly resolved     readme: 'ERROR: No README.md file found!',
34 silly resolved     readmeFilename: 'README.md',
34 silly resolved     _id: 'pathcap@0.0.1',
34 silly resolved     _from: 'pathcap' } ]
35 info install pathcap@0.0.1 into /home/tahu/.nvm/v0.8.15/lib
36 info installOne pathcap@0.0.1
37 verbose from cache /home/tahu/.npm/pathcap/0.0.1/package/package.json
38 info /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap unbuild
39 verbose read json /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/package.json
40 verbose tar unpack /home/tahu/.npm/pathcap/0.0.1/package.tgz
41 silly lockFile 6d124831-v0-8-15-lib-node-modules-pathcap /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap
42 verbose lock /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap /home/tahu/.npm/6d124831-v0-8-15-lib-node-modules-pathcap.lock
43 silly gunzTarPerm modes [ '755', '644' ]
44 silly gunzTarPerm extractEntry package.json
45 silly gunzTarPerm extractEntry .npmignore
46 silly gunzTarPerm extractEntry README.md
47 silly gunzTarPerm extractEntry bin/pathcap
48 silly gunzTarPerm extractEntry lib/cli.js
49 silly gunzTarPerm extractEntry lib/api.js
50 silly gunzTarPerm extractEntry lib/renameIfNeeded.js
51 verbose read json /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/package.json
52 silly lockFile 6d124831-v0-8-15-lib-node-modules-pathcap /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap
53 info preinstall pathcap@0.0.1
54 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/package.json
55 verbose readDependencies using package.json deps
56 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/package.json
57 verbose readDependencies using package.json deps
58 verbose cache add [ 'async@0.1.x', null ]
59 silly cache add name=undefined spec="async@0.1.x" args=["async@0.1.x",null]
60 verbose parsed url { pathname: 'async@0.1.x',
60 verbose parsed url   path: 'async@0.1.x',
60 verbose parsed url   href: 'async@0.1.x' }
61 silly cache add name="async" spec="0.1.x" args=["async","0.1.x"]
62 verbose parsed url { pathname: '0.1.x', path: '0.1.x', href: '0.1.x' }
63 verbose addNamed [ 'async', '0.1.x' ]
64 verbose addNamed [ null, '>=0.1.0- <0.2.0-' ]
65 silly lockFile 463e1c03-async-0-1-x async@0.1.x
66 verbose lock async@0.1.x /home/tahu/.npm/463e1c03-async-0-1-x.lock
67 verbose cache add [ 'optimist@0.3.x', null ]
68 silly cache add name=undefined spec="optimist@0.3.x" args=["optimist@0.3.x",null]
69 verbose parsed url { pathname: 'optimist@0.3.x',
69 verbose parsed url   path: 'optimist@0.3.x',
69 verbose parsed url   href: 'optimist@0.3.x' }
70 silly cache add name="optimist" spec="0.3.x" args=["optimist","0.3.x"]
71 verbose parsed url { pathname: '0.3.x', path: '0.3.x', href: '0.3.x' }
72 verbose addNamed [ 'optimist', '0.3.x' ]
73 verbose addNamed [ null, '>=0.3.0- <0.4.0-' ]
74 silly lockFile 3bb5ebed-optimist-0-3-x optimist@0.3.x
75 verbose lock optimist@0.3.x /home/tahu/.npm/3bb5ebed-optimist-0-3-x.lock
76 silly addNameRange { name: 'async', range: '>=0.1.0- <0.2.0-', hasData: false }
77 silly addNameRange { name: 'optimist', range: '>=0.3.0- <0.4.0-', hasData: false }
78 verbose cache add [ 'trim@0.0.x', null ]
79 silly cache add name=undefined spec="trim@0.0.x" args=["trim@0.0.x",null]
80 verbose parsed url { pathname: 'trim@0.0.x',
80 verbose parsed url   path: 'trim@0.0.x',
80 verbose parsed url   href: 'trim@0.0.x' }
81 silly cache add name="trim" spec="0.0.x" args=["trim","0.0.x"]
82 verbose parsed url { pathname: '0.0.x', path: '0.0.x', href: '0.0.x' }
83 verbose addNamed [ 'trim', '0.0.x' ]
84 verbose addNamed [ null, '>=0.0.0- <0.1.0-' ]
85 silly lockFile 0850b5e2-trim-0-0-x trim@0.0.x
86 verbose lock trim@0.0.x /home/tahu/.npm/0850b5e2-trim-0-0-x.lock
87 silly addNameRange { name: 'trim', range: '>=0.0.0- <0.1.0-', hasData: false }
88 verbose url raw optimist
89 verbose url resolving [ 'https://registry.npmjs.org/', './optimist' ]
90 verbose url resolved https://registry.npmjs.org/optimist
91 info trying registry request attempt 1 at 10:17:21
92 verbose etag "D1A53VF0KGN493B1WV2N4OQKF"
93 http GET https://registry.npmjs.org/optimist
94 verbose url raw async
95 verbose url resolving [ 'https://registry.npmjs.org/', './async' ]
96 verbose url resolved https://registry.npmjs.org/async
97 info trying registry request attempt 1 at 10:17:21
98 verbose etag "R705GVCKKLN43YXAMGBCXNG"
99 http GET https://registry.npmjs.org/async
100 verbose url raw trim
101 verbose url resolving [ 'https://registry.npmjs.org/', './trim' ]
102 verbose url resolved https://registry.npmjs.org/trim
103 info trying registry request attempt 1 at 10:17:21
104 verbose etag "3XFIB4W4KC7FSMOOUKO0QGCK1"
105 http GET https://registry.npmjs.org/trim
106 http 304 https://registry.npmjs.org/trim
107 silly registry.get cb [ 304,
107 silly registry.get   { server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',
107 silly registry.get     etag: '"3XFIB4W4KC7FSMOOUKO0QGCK1"',
107 silly registry.get     date: 'Fri, 07 Dec 2012 08:16:36 GMT',
107 silly registry.get     'content-length': '0' } ]
108 verbose etag trim from cache
109 http 304 https://registry.npmjs.org/optimist
110 silly registry.get cb [ 304,
110 silly registry.get   { server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',
110 silly registry.get     etag: '"D1A53VF0KGN493B1WV2N4OQKF"',
110 silly registry.get     date: 'Fri, 07 Dec 2012 08:16:36 GMT',
110 silly registry.get     'content-length': '0' } ]
111 verbose etag optimist from cache
112 http 304 https://registry.npmjs.org/async
113 silly registry.get cb [ 304,
113 silly registry.get   { server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',
113 silly registry.get     etag: '"R705GVCKKLN43YXAMGBCXNG"',
113 silly registry.get     date: 'Fri, 07 Dec 2012 08:16:36 GMT',
113 silly registry.get     'content-length': '0' } ]
114 verbose etag async from cache
115 silly addNameRange number 2 { name: 'trim', range: '>=0.0.0- <0.1.0-', hasData: true }
116 silly addNameRange versions [ 'trim', [ '0.0.1' ] ]
117 verbose addNamed [ 'trim', '0.0.1' ]
118 verbose addNamed [ '0.0.1', '0.0.1' ]
119 silly lockFile 10c1c9ff-trim-0-0-1 trim@0.0.1
120 verbose lock trim@0.0.1 /home/tahu/.npm/10c1c9ff-trim-0-0-1.lock
121 silly addNameRange number 2 { name: 'optimist', range: '>=0.3.0- <0.4.0-', hasData: true }
122 silly addNameRange versions [ 'optimist',
122 silly addNameRange   [ '0.0.1',
122 silly addNameRange     '0.0.2',
122 silly addNameRange     '0.0.4',
122 silly addNameRange     '0.0.5',
122 silly addNameRange     '0.0.6',
122 silly addNameRange     '0.0.7',
122 silly addNameRange     '0.1.0',
122 silly addNameRange     '0.1.1',
122 silly addNameRange     '0.1.2',
122 silly addNameRange     '0.1.3',
122 silly addNameRange     '0.1.4',
122 silly addNameRange     '0.1.5',
122 silly addNameRange     '0.1.6',
122 silly addNameRange     '0.1.7',
122 silly addNameRange     '0.1.8',
122 silly addNameRange     '0.1.9',
122 silly addNameRange     '0.0.3',
122 silly addNameRange     '0.2.0',
122 silly addNameRange     '0.2.1',
122 silly addNameRange     '0.2.2',
122 silly addNameRange     '0.2.3',
122 silly addNameRange     '0.2.4',
122 silly addNameRange     '0.2.5',
122 silly addNameRange     '0.2.6',
122 silly addNameRange     '0.2.7',
122 silly addNameRange     '0.2.8',
122 silly addNameRange     '0.3.0',
122 silly addNameRange     '0.3.1',
122 silly addNameRange     '0.3.3',
122 silly addNameRange     '0.3.4',
122 silly addNameRange     '0.3.5' ] ]
123 verbose addNamed [ 'optimist', '0.3.5' ]
124 verbose addNamed [ '0.3.5', '0.3.5' ]
125 silly lockFile 72e2da2d-optimist-0-3-5 optimist@0.3.5
126 verbose lock optimist@0.3.5 /home/tahu/.npm/72e2da2d-optimist-0-3-5.lock
127 verbose read json /home/tahu/.npm/trim/0.0.1/package/package.json
128 verbose read json /home/tahu/.npm/optimist/0.3.5/package/package.json
129 silly addNameRange number 2 { name: 'async', range: '>=0.1.0- <0.2.0-', hasData: true }
130 silly addNameRange versions [ 'async',
130 silly addNameRange   [ '0.1.0',
130 silly addNameRange     '0.1.1',
130 silly addNameRange     '0.1.2',
130 silly addNameRange     '0.1.3',
130 silly addNameRange     '0.1.4',
130 silly addNameRange     '0.1.5',
130 silly addNameRange     '0.1.6',
130 silly addNameRange     '0.1.7',
130 silly addNameRange     '0.1.8',
130 silly addNameRange     '0.1.9',
130 silly addNameRange     '0.1.10',
130 silly addNameRange     '0.1.11',
130 silly addNameRange     '0.1.12',
130 silly addNameRange     '0.1.13',
130 silly addNameRange     '0.1.14',
130 silly addNameRange     '0.1.15',
130 silly addNameRange     '0.1.16',
130 silly addNameRange     '0.1.17',
130 silly addNameRange     '0.1.18',
130 silly addNameRange     '0.1.19',
130 silly addNameRange     '0.1.20',
130 silly addNameRange     '0.1.21',
130 silly addNameRange     '0.1.22' ] ]
131 verbose addNamed [ 'async', '0.1.22' ]
132 verbose addNamed [ '0.1.22', '0.1.22' ]
133 silly lockFile 09d21715-async-0-1-22 async@0.1.22
134 verbose lock async@0.1.22 /home/tahu/.npm/09d21715-async-0-1-22.lock
135 verbose read json /home/tahu/.npm/async/0.1.22/package/package.json
136 silly lockFile 10c1c9ff-trim-0-0-1 trim@0.0.1
137 silly lockFile 72e2da2d-optimist-0-3-5 optimist@0.3.5
138 silly lockFile 0850b5e2-trim-0-0-x trim@0.0.x
139 silly lockFile 3bb5ebed-optimist-0-3-x optimist@0.3.x
140 silly lockFile 09d21715-async-0-1-22 async@0.1.22
141 silly lockFile 463e1c03-async-0-1-x async@0.1.x
142 silly resolved [ { name: 'trim',
142 silly resolved     version: '0.0.1',
142 silly resolved     description: 'Trim string whitespace',
142 silly resolved     keywords: [ 'string', 'trim' ],
142 silly resolved     author: { name: 'TJ Holowaychuk', email: 'tj@vision-media.ca' },
142 silly resolved     dependencies: {},
142 silly resolved     devDependencies: { mocha: '*', should: '*' },
142 silly resolved     main: 'index',
142 silly resolved     readme: '\n# trim\n\n  Trims string whitespace.\n\n## API\n\n   - [trim(str)](#trimstr)\n   - [.left(str)](#leftstr)\n   - [.right(str)](#rightstr)\n<a name="" />\n \n<a name="trimstr" />\n### trim(str)\nshould trim leading / trailing whitespace.\n\n```js\ntrim(\'  foo bar  \').should.equal(\'foo bar\');\ntrim(\'\\n\\n\\nfoo bar\\n\\r\\n\\n\').should.equal(\'foo bar\');\n```\n\n<a name="leftstr" />\n### .left(str)\nshould trim leading whitespace.\n\n```js\ntrim.left(\'  foo bar  \').should.equal(\'foo bar  \');\n```\n\n<a name="rightstr" />\n### .right(str)\nshould trim trailing whitespace.\n\n```js\ntrim.right(\'  foo bar  \').should.equal(\'  foo bar\');\n```\n\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2012 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\'Software\'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \'AS IS\', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.',
142 silly resolved     readmeFilename: 'Readme.md',
142 silly resolved     _id: 'trim@0.0.1',
142 silly resolved     _from: 'trim@0.0.x' },
142 silly resolved   { name: 'optimist',
142 silly resolved     version: '0.3.5',
142 silly resolved     description: 'Light-weight option parsing with an argv hash. No optstrings attached.',
142 silly resolved     main: './index.js',
142 silly resolved     directories: { lib: '.', test: 'test', example: 'example' },
142 silly resolved     dependencies: { wordwrap: '~0.0.2' },
142 silly resolved     devDependencies: { hashish: '~0.0.4', tap: '~0.2.4' },
142 silly resolved     scripts: { test: 'tap ./test/*.js' },
142 silly resolved     repository:
142 silly resolved      { type: 'git',
142 silly resolved        url: 'http://github.com/substack/node-optimist.git' },
142 silly resolved     keywords:
142 silly resolved      [ 'argument',
142 silly resolved        'args',
142 silly resolved        'option',
142 silly resolved        'parser',
142 silly resolved        'parsing',
142 silly resolved        'cli',
142 silly resolved        'command' ],
142 silly resolved     author:
142 silly resolved      { name: 'James Halliday',
142 silly resolved        email: 'mail@substack.net',
142 silly resolved        url: 'http://substack.net' },
142 silly resolved     license: 'MIT/X11',
142 silly resolved     engine: { node: '>=0.4' },
142 silly resolved     readme: 'optimist\n========\n\nOptimist is a node.js library for option parsing for people who hate option\nparsing. More specifically, this module is for people who like all the --bells\nand -whistlz of program usage but think optstrings are a waste of time.\n\nWith optimist, option parsing doesn\'t have to suck (as much).\n\n[![build status](https://secure.travis-ci.org/substack/node-optimist.png)](http://travis-ci.org/substack/node-optimist)\n\nexamples\n========\n\nWith Optimist, the options are just a hash! No optstrings attached.\n-------------------------------------------------------------------\n\nxup.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\n\nif (argv.rif - 5 * argv.xup > 7.138) {\n    console.log(\'Buy more riffiwobbles\');\n}\nelse {\n    console.log(\'Sell the xupptumblers\');\n}\n````\n\n***\n\n    $ ./xup.js --rif=55 --xup=9.52\n    Buy more riffiwobbles\n    \n    $ ./xup.js --rif 12 --xup 8.1\n    Sell the xupptumblers\n\n![This one\'s optimistic.](http://substack.net/images/optimistic.png)\n\nBut wait! There\'s more! You can do short options:\n-------------------------------------------------\n \nshort.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\n````\n\n***\n\n    $ ./short.js -x 10 -y 21\n    (10,21)\n\nAnd booleans, both long and short (and grouped):\n----------------------------------\n\nbool.js:\n\n````javascript\n#!/usr/bin/env node\nvar util = require(\'util\');\nvar argv = require(\'optimist\').argv;\n\nif (argv.s) {\n    util.print(argv.fr ? \'Le chat dit: \' : \'The cat says: \');\n}\nconsole.log(\n    (argv.fr ? \'miaou\' : \'meow\') + (argv.p ? \'.\' : \'\')\n);\n````\n\n***\n\n    $ ./bool.js -s\n    The cat says: meow\n    \n    $ ./bool.js -sp\n    The cat says: meow.\n\n    $ ./bool.js -sp --fr\n    Le chat dit: miaou.\n\nAnd non-hypenated options too! Just use `argv._`!\n-------------------------------------------------\n \nnonopt.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\').argv;\nconsole.log(\'(%d,%d)\', argv.x, argv.y);\nconsole.log(argv._);\n````\n\n***\n\n    $ ./nonopt.js -x 6.82 -y 3.35 moo\n    (6.82,3.35)\n    [ \'moo\' ]\n    \n    $ ./nonopt.js foo -x 0.54 bar -y 1.12 baz\n    (0.54,1.12)\n    [ \'foo\', \'bar\', \'baz\' ]\n\nPlus, Optimist comes with .usage() and .demand()!\n-------------------------------------------------\n\ndivide.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Usage: $0 -x [num] -y [num]\')\n    .demand([\'x\',\'y\'])\n    .argv;\n\nconsole.log(argv.x / argv.y);\n````\n\n***\n \n    $ ./divide.js -x 55 -y 11\n    5\n    \n    $ node ./divide.js -x 4.91 -z 2.51\n    Usage: node ./divide.js -x [num] -y [num]\n\n    Options:\n      -x  [required]\n      -y  [required]\n\n    Missing required arguments: y\n\nEVEN MORE HOLY COW\n------------------\n\ndefault_singles.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default(\'x\', 10)\n    .default(\'y\', 10)\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_singles.js -x 5\n    15\n\ndefault_hash.js:\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .default({ x : 10, y : 10 })\n    .argv\n;\nconsole.log(argv.x + argv.y);\n````\n\n***\n\n    $ ./default_hash.js -y 7\n    17\n\nAnd if you really want to get all descriptive about it...\n---------------------------------------------------------\n\nboolean_single.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean(\'v\')\n    .argv\n;\nconsole.dir(argv);\n````\n\n***\n\n    $ ./boolean_single.js -v foo bar baz\n    true\n    [ \'bar\', \'baz\', \'foo\' ]\n\nboolean_double.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .boolean([\'x\',\'y\',\'z\'])\n    .argv\n;\nconsole.dir([ argv.x, argv.y, argv.z ]);\nconsole.dir(argv._);\n````\n\n***\n\n    $ ./boolean_double.js -x -z one two three\n    [ true, false, true ]\n    [ \'one\', \'two\', \'three\' ]\n\nOptimist is here to help...\n---------------------------\n\nYou can describe parameters for help messages and set aliases. Optimist figures\nout how to format a handy help string automatically.\n\nline_count.js\n\n````javascript\n#!/usr/bin/env node\nvar argv = require(\'optimist\')\n    .usage(\'Count the lines in a file.\\nUsage: $0\')\n    .demand(\'f\')\n    .alias(\'f\', \'file\')\n    .describe(\'f\', \'Load a file\')\n    .argv\n;\n\nvar fs = require(\'fs\');\nvar s = fs.createReadStream(argv.file);\n\nvar lines = 0;\ns.on(\'data\', function (buf) {\n    lines += buf.toString().match(/\\n/g).length;\n});\n\ns.on(\'end\', function () {\n    console.log(lines);\n});\n````\n\n***\n\n    $ node line_count.js\n    Count the lines in a file.\n    Usage: node ./line_count.js\n\n    Options:\n      -f, --file  Load a file  [required]\n\n    Missing required arguments: f\n\n    $ node line_count.js --file line_count.js \n    20\n    \n    $ node line_count.js -f line_count.js \n    20\n\nmethods\n=======\n\nBy itself,\n\n````javascript\nrequire(\'optimist\').argv\n`````\n\nwill use `process.argv` array to construct the `argv` object.\n\nYou can pass in the `process.argv` yourself:\n\n````javascript\nrequire(\'optimist\')([ \'-x\', \'1\', \'-y\', \'2\' ]).argv\n````\n\nor use .parse() to do the same thing:\n\n````javascript\nrequire(\'optimist\').parse([ \'-x\', \'1\', \'-y\', \'2\' ])\n````\n\nThe rest of these methods below come in just before the terminating `.argv`.\n\n.alias(key, alias)\n------------------\n\nSet key names as equivalent such that updates to a key will propagate to aliases\nand vice-versa.\n\nOptionally `.alias()` can take an object that maps keys to aliases.\n\n.default(key, value)\n--------------------\n\nSet `argv[key]` to `value` if no option was specified on `process.argv`.\n\nOptionally `.default()` can take an object that maps keys to default values.\n\n.demand(key)\n------------\n\nIf `key` is a string, show the usage information and exit if `key` wasn\'t\nspecified in `process.argv`.\n\nIf `key` is a number, demand at least as many non-option arguments, which show\nup in `argv._`.\n\nIf `key` is an Array, demand each element.\n\n.describe(key, desc)\n--------------------\n\nDescribe a `key` for the generated usage information.\n\nOptionally `.describe()` can take an object that maps keys to descriptions.\n\n.options(key, opt)\n------------------\n\nInstead of chaining together `.alias().demand().default()`, you can specify\nkeys in `opt` for each of the chainable methods.\n\nFor example:\n\n````javascript\nvar argv = require(\'optimist\')\n    .options(\'f\', {\n        alias : \'file\',\n        default : \'/etc/passwd\',\n    })\n    .argv\n;\n````\n\nis the same as\n\n````javascript\nvar argv = require(\'optimist\')\n    .alias(\'f\', \'file\')\n    .default(\'f\', \'/etc/passwd\')\n    .argv\n;\n````\n\nOptionally `.options()` can take an object that maps keys to `opt` parameters.\n\n.usage(message)\n---------------\n\nSet a usage message to show which commands to use. Inside `message`, the string\n`$0` will get interpolated to the current script name or node command for the\npresent script similar to how `$0` works in bash or perl.\n\n.check(fn)\n----------\n\nCheck that certain conditions are met in the provided arguments.\n\nIf `fn` throws or returns `false`, show the thrown error, usage information, and\nexit.\n\n.boolean(key)\n-------------\n\nInterpret `key` as a boolean. If a non-flag option follows `key` in\n`process.argv`, that string won\'t get set as the value of `key`.\n\nIf `key` never shows up as a flag in `process.arguments`, `argv[key]` will be\n`false`.\n\nIf `key` is an Array, interpret all the elements as booleans.\n\n.string(key)\n------------\n\nTell the parser logic not to interpret `key` as a number or boolean.\nThis can be useful if you need to preserve leading zeros in an input.\n\nIf `key` is an Array, interpret all the elements as strings.\n\n.wrap(columns)\n--------------\n\nFormat usage output to wrap at `columns` many columns.\n\n.help()\n-------\n\nReturn the generated usage string.\n\n.showHelp(fn=console.error)\n---------------------------\n\nPrint the usage data using `fn` for printing.\n\n.parse(args)\n------------\n\nParse `args` instead of `process.argv`. Returns the `argv` object.\n\n.argv\n-----\n\nGet the arguments as a plain old object.\n\nArguments without a corresponding flag show up in the `argv._` array.\n\nThe script name or node command is available at `argv.$0` similarly to how `$0`\nworks in bash or perl.\n\nparsing tricks\n==============\n\nstop parsing\n------------\n\nUse `--` to stop parsing flags and stuff the remainder into `argv._`.\n\n    $ node examples/reflect.js -a 1 -b 2 -- -c 3 -d 4\n    { _: [ \'-c\', \'3\', \'-d\', \'4\' ],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: 1,\n      b: 2 }\n\nnegate fields\n-------------\n\nIf you want to explicity set a field to false instead of just leaving it\nundefined or to override a default you can do `--no-key`.\n\n    $ node examples/reflect.js -a --no-b\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n      a: true,\n      b: false }\n\nnumbers\n-------\n\nEvery argument that looks like a number (`!isNaN(Number(arg))`) is converted to\none. This way you can just `net.createConnection(argv.port)` and you can add\nnumbers out of `argv` with `+` without having that mean concatenation,\nwhich is super frustrating.\n\nduplicates\n----------\n\nIf you specify a flag multiple times it will get turned into an array containing\nall the values in order.\n\n    $ node examples/reflect.js -x 5 -x 8 -x 0\n    { _: [],\n      \'$0\': \'node ./examples/reflect.js\',\n        x: [ 5, 8, 0 ] }\n\ndot notation\n------------\n\nWhen you use dots (`.`s) in argument names, an implicit object path is assumed.\nThis lets you organize arguments into nested objects.\n\n     $ node examples/reflect.js --foo.bar.baz=33 --foo.quux=5\n     { _: [],\n       \'$0\': \'node ./examples/reflect.js\',\n         foo: { bar: { baz: 33 }, quux: 5 } }\n\ninstallation\n============\n\nWith [npm](http://github.com/isaacs/npm), just do:\n    npm install optimist\n \nor clone this project on github:\n\n    git clone http://github.com/substack/node-optimist.git\n\nTo run the tests with [expresso](http://github.com/visionmedia/expresso),\njust do:\n    \n    expresso\n\ninspired By\n===========\n\nThis module is loosely inspired by Perl\'s\n[Getopt::Casual](http://search.cpan.org/~photo/Getopt-Casual-0.13.1/Casual.pm).\n',
142 silly resolved     readmeFilename: 'README.markdown',
142 silly resolved     _id: 'optimist@0.3.5',
142 silly resolved     _from: 'optimist@0.3.x' },
142 silly resolved   { name: 'async',
142 silly resolved     description: 'Higher-order functions and common patterns for asynchronous code',
142 silly resolved     main: './index',
142 silly resolved     author: { name: 'Caolan McMahon' },
142 silly resolved     version: '0.1.22',
142 silly resolved     repository: { type: 'git', url: 'http://github.com/caolan/async.git' },
142 silly resolved     bugs: { url: 'http://github.com/caolan/async/issues' },
142 silly resolved     licenses: [ [Object] ],
142 silly resolved     devDependencies: { nodeunit: '>0.0.0', 'uglify-js': '1.2.x', nodelint: '>0.0.0' },
142 silly resolved     readme: '# Async.js\n\nAsync is a utility module which provides straight-forward, powerful functions\nfor working with asynchronous JavaScript. Although originally designed for\nuse with [node.js](http://nodejs.org), it can also be used directly in the\nbrowser.\n\nAsync provides around 20 functions that include the usual \'functional\'\nsuspects (map, reduce, filter, forEach…) as well as some common patterns\nfor asynchronous control flow (parallel, series, waterfall…). All these\nfunctions assume you follow the node.js convention of providing a single\ncallback as the last argument of your async function.\n\n\n## Quick Examples\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n    async.parallel([\n        function(){ ... },\n        function(){ ... }\n    ], callback);\n\n    async.series([\n        function(){ ... },\n        function(){ ... }\n    ]);\n\nThere are many more functions available so take a look at the docs below for a\nfull list. This module aims to be comprehensive, so if you feel anything is\nmissing please create a GitHub issue for it.\n\n\n## Download\n\nReleases are available for download from\n[GitHub](http://github.com/caolan/async/downloads).\nAlternatively, you can install using Node Package Manager (npm):\n\n    npm install async\n\n\n__Development:__ [async.js](https://github.com/caolan/async/raw/master/lib/async.js) - 17.5kb Uncompressed\n\n__Production:__ [async.min.js](https://github.com/caolan/async/raw/master/dist/async.min.js) - 1.7kb Packed and Gzipped\n\n\n## In the Browser\n\nSo far its been tested in IE6, IE7, IE8, FF3.6 and Chrome 5. Usage:\n\n    <script type="text/javascript" src="async.js"></script>\n    <script type="text/javascript">\n\n        async.map(data, asyncProcess, function(err, results){\n            alert(results);\n        });\n\n    </script>\n\n\n## Documentation\n\n### Collections\n\n* [forEach](#forEach)\n* [map](#map)\n* [filter](#filter)\n* [reject](#reject)\n* [reduce](#reduce)\n* [detect](#detect)\n* [sortBy](#sortBy)\n* [some](#some)\n* [every](#every)\n* [concat](#concat)\n\n### Control Flow\n\n* [series](#series)\n* [parallel](#parallel)\n* [whilst](#whilst)\n* [until](#until)\n* [waterfall](#waterfall)\n* [queue](#queue)\n* [auto](#auto)\n* [iterator](#iterator)\n* [apply](#apply)\n* [nextTick](#nextTick)\n\n### Utils\n\n* [memoize](#memoize)\n* [unmemoize](#unmemoize)\n* [log](#log)\n* [dir](#dir)\n* [noConflict](#noConflict)\n\n\n## Collections\n\n<a name="forEach" />\n### forEach(arr, iterator, callback)\n\nApplies an iterator function to each item in an array, in parallel.\nThe iterator is called with an item from the list and a callback for when it\nhas finished. If the iterator passes an error to this callback, the main\ncallback for the forEach function is immediately called with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // assuming openFiles is an array of file names and saveFile is a function\n    // to save the modified contents of that file:\n\n    async.forEach(openFiles, saveFile, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n\n---------------------------------------\n\n<a name="forEachSeries" />\n### forEachSeries(arr, iterator, callback)\n\nThe same as forEach only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. This means the iterator functions will complete in order.\n\n\n---------------------------------------\n\n<a name="forEachLimit" />\n### forEachLimit(arr, limit, iterator, callback)\n\nThe same as forEach only the iterator is applied to batches of items in the\narray, in series. The next batch of iterators is only called once the current\none has completed processing.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* limit - How many items should be in each batch.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(err) - A callback which is called after all the iterator functions\n  have finished, or an error has occurred.\n\n__Example__\n\n    // Assume documents is an array of JSON objects and requestApi is a\n    // function that interacts with a rate-limited REST api.\n\n    async.forEachLimit(documents, 20, requestApi, function(err){\n        // if any of the saves produced an error, err would equal that error\n    });\n---------------------------------------\n\n<a name="map" />\n### map(arr, iterator, callback)\n\nProduces a new array of values by mapping each value in the given array through\nthe iterator function. The iterator is called with an item from the array and a\ncallback for when it has finished processing. The callback takes 2 arguments, \nan error and the transformed item from the array. If the iterator passes an\nerror to this callback, the main callback for the map function is immediately\ncalled with the error.\n\nNote, that since this function applies the iterator to each item in parallel\nthere is no guarantee that the iterator functions will complete in order, however\nthe results array will be in the same order as the original array.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a transformed item.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array of the\n  transformed items from the original array.\n\n__Example__\n\n    async.map([\'file1\',\'file2\',\'file3\'], fs.stat, function(err, results){\n        // results is now an array of stats for each file\n    });\n\n---------------------------------------\n\n<a name="mapSeries" />\n### mapSeries(arr, iterator, callback)\n\nThe same as map only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n\n---------------------------------------\n\n<a name="filter" />\n### filter(arr, iterator, callback)\n\n__Alias:__ select\n\nReturns a new array of all the values which pass an async truth test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. This operation is\nperformed in parallel, but the results array will be in the same order as the\noriginal.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(results) - A callback which is called after all the iterator\n  functions have finished.\n\n__Example__\n\n    async.filter([\'file1\',\'file2\',\'file3\'], path.exists, function(results){\n        // results now equals an array of the existing files\n    });\n\n---------------------------------------\n\n<a name="filterSeries" />\n### filterSeries(arr, iterator, callback)\n\n__alias:__ selectSeries\n\nThe same as filter only the iterator is applied to each item in the array in\nseries. The next iterator is only called once the current one has completed\nprocessing. The results array will be in the same order as the original.\n\n---------------------------------------\n\n<a name="reject" />\n### reject(arr, iterator, callback)\n\nThe opposite of filter. Removes values that pass an async truth test.\n\n---------------------------------------\n\n<a name="rejectSeries" />\n### rejectSeries(arr, iterator, callback)\n\nThe same as filter, only the iterator is applied to each item in the array\nin series.\n\n\n---------------------------------------\n\n<a name="reduce" />\n### reduce(arr, memo, iterator, callback)\n\n__aliases:__ inject, foldl\n\nReduces a list of values into a single value using an async iterator to return\neach successive step. Memo is the initial state of the reduction. This\nfunction only operates in series. For performance reasons, it may make sense to\nsplit a call to this function into a parallel map, then use the normal\nArray.prototype.reduce on the results. This function is for situations where\neach step in the reduction needs to be async, if you can get the data before\nreducing it then its probably a good idea to do so.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* memo - The initial state of the reduction.\n* iterator(memo, item, callback) - A function applied to each item in the\n  array to produce the next step in the reduction. The iterator is passed a\n  callback which accepts an optional error as its first argument, and the state\n  of the reduction as the second. If an error is passed to the callback, the\n  reduction is stopped and the main callback is immediately called with the\n  error.\n* callback(err, result) - A callback which is called after all the iterator\n  functions have finished. Result is the reduced value.\n\n__Example__\n\n    async.reduce([1,2,3], 0, function(memo, item, callback){\n        // pointless async:\n        process.nextTick(function(){\n            callback(null, memo + item)\n        });\n    }, function(err, result){\n        // result is now equal to the last value of memo, which is 6\n    });\n\n---------------------------------------\n\n<a name="reduceRight" />\n### reduceRight(arr, memo, iterator, callback)\n\n__Alias:__ foldr\n\nSame as reduce, only operates on the items in the array in reverse order.\n\n\n---------------------------------------\n\n<a name="detect" />\n### detect(arr, iterator, callback)\n\nReturns the first value in a list that passes an async truth test. The\niterator is applied in parallel, meaning the first iterator to return true will\nfire the detect callback with that result. That means the result might not be\nthe first item in the original array (in terms of order) that passes the test.\n\nIf order within the original array is important then look at detectSeries.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  the first item in the array that passes the truth test (iterator) or the\n  value undefined if none passed.\n\n__Example__\n\n    async.detect([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // result now equals the first file in the list that exists\n    });\n\n---------------------------------------\n\n<a name="detectSeries" />\n### detectSeries(arr, iterator, callback)\n\nThe same as detect, only the iterator is applied to each item in the array\nin series. This means the result is always the first in the original array (in\nterms of array order) that passes the truth test.\n\n\n---------------------------------------\n\n<a name="sortBy" />\n### sortBy(arr, iterator, callback)\n\nSorts a list by the results of running each value through an async iterator.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and a value to use as the sort criteria.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is the items from\n  the original array sorted by the values returned by the iterator calls.\n\n__Example__\n\n    async.sortBy([\'file1\',\'file2\',\'file3\'], function(file, callback){\n        fs.stat(file, function(err, stats){\n            callback(err, stats.mtime);\n        });\n    }, function(err, results){\n        // results is now the original array of files sorted by\n        // modified date\n    });\n\n\n---------------------------------------\n\n<a name="some" />\n### some(arr, iterator, callback)\n\n__Alias:__ any\n\nReturns true if at least one element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists. Once any iterator\ncall returns true, the main callback is immediately called.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called as soon as any iterator returns\n  true, or after all the iterator functions have finished. Result will be\n  either true or false depending on the values of the async tests.\n\n__Example__\n\n    async.some([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then at least one of the files exists\n    });\n\n---------------------------------------\n\n<a name="every" />\n### every(arr, iterator, callback)\n\n__Alias:__ all\n\nReturns true if every element in the array satisfies an async test.\n_The callback for each iterator call only accepts a single argument of true or\nfalse, it does not accept an error argument first!_ This is in-line with the\nway node libraries work with truth tests like path.exists.\n\n__Arguments__\n\n* arr - An array to iterate over.\n* iterator(item, callback) - A truth test to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed.\n* callback(result) - A callback which is called after all the iterator\n  functions have finished. Result will be either true or false depending on\n  the values of the async tests.\n\n__Example__\n\n    async.every([\'file1\',\'file2\',\'file3\'], path.exists, function(result){\n        // if result is true then every file exists\n    });\n\n---------------------------------------\n\n<a name="concat" />\n### concat(arr, iterator, callback)\n\nApplies an iterator to each item in a list, concatenating the results. Returns the\nconcatenated list. The iterators are called in parallel, and the results are\nconcatenated as they return. There is no guarantee that the results array will\nbe returned in the original order of the arguments passed to the iterator function.\n\n__Arguments__\n\n* arr - An array to iterate over\n* iterator(item, callback) - A function to apply to each item in the array.\n  The iterator is passed a callback which must be called once it has completed\n  with an error (which can be null) and an array of results.\n* callback(err, results) - A callback which is called after all the iterator\n  functions have finished, or an error has occurred. Results is an array containing\n  the concatenated results of the iterator function.\n\n__Example__\n\n    async.concat([\'dir1\',\'dir2\',\'dir3\'], fs.readdir, function(err, files){\n        // files is now a list of filenames that exist in the 3 directories\n    });\n\n---------------------------------------\n\n<a name="concatSeries" />\n### concatSeries(arr, iterator, callback)\n\nSame as async.concat, but executes in series instead of parallel.\n\n\n## Control Flow\n\n<a name="series" />\n### series(tasks, [callback])\n\nRun an array of functions in series, each one running once the previous\nfunction has completed. If any functions in the series pass an error to its\ncallback, no more functions are run and the callback for the series is\nimmediately called with the value of the error. Once the tasks have completed,\nthe results are passed to the final callback as an array.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.series.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed\n  a callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.series([\n        function(callback){\n            // do some stuff ...\n            callback(null, \'one\');\n        },\n        function(callback){\n            // do some more stuff ...\n            callback(null, \'two\');\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // results is now equal to [\'one\', \'two\']\n    });\n\n\n    // an example using an object instead of an array\n    async.series({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equal to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="parallel" />\n### parallel(tasks, [callback])\n\nRun an array of functions in parallel, without waiting until the previous\nfunction has completed. If any of the functions pass an error to its\ncallback, the main callback is immediately called with the value of the error.\nOnce the tasks have completed, the results are passed to the final callback as an\narray.\n\nIt is also possible to use an object instead of an array. Each property will be\nrun as a function and the results will be passed to the final callback as an object\ninstead of an array. This can be a more readable way of handling results from\nasync.parallel.\n\n\n__Arguments__\n\n* tasks - An array or object containing functions to run, each function is passed a\n  callback it must call on completion.\n* callback(err, results) - An optional callback to run once all the functions\n  have completed. This function gets an array of all the arguments passed to\n  the callbacks used in the array.\n\n__Example__\n\n    async.parallel([\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'one\');\n            }, 200);\n        },\n        function(callback){\n            setTimeout(function(){\n                callback(null, \'two\');\n            }, 100);\n        },\n    ],\n    // optional callback\n    function(err, results){\n        // the results array will equal [\'one\',\'two\'] even though\n        // the second function had a shorter timeout.\n    });\n\n\n    // an example using an object instead of an array\n    async.parallel({\n        one: function(callback){\n            setTimeout(function(){\n                callback(null, 1);\n            }, 200);\n        },\n        two: function(callback){\n            setTimeout(function(){\n                callback(null, 2);\n            }, 100);\n        },\n    },\n    function(err, results) {\n        // results is now equals to: {one: 1, two: 2}\n    });\n\n\n---------------------------------------\n\n<a name="whilst" />\n### whilst(test, fn, callback)\n\nRepeatedly call fn, while test returns true. Calls the callback when stopped,\nor an error occurs.\n\n__Arguments__\n\n* test() - synchronous truth test to perform before each execution of fn.\n* fn(callback) - A function to call each time the test passes. The function is\n  passed a callback which must be called once it has completed with an optional\n  error as the first argument.\n* callback(err) - A callback which is called after the test fails and repeated\n  execution of fn has stopped.\n\n__Example__\n\n    var count = 0;\n\n    async.whilst(\n        function () { return count < 5; },\n        function (callback) {\n            count++;\n            setTimeout(callback, 1000);\n        },\n        function (err) {\n            // 5 seconds have passed\n        }\n    );\n\n\n---------------------------------------\n\n<a name="until" />\n### until(test, fn, callback)\n\nRepeatedly call fn, until test returns true. Calls the callback when stopped,\nor an error occurs.\n\nThe inverse of async.whilst.\n\n\n---------------------------------------\n\n<a name="waterfall" />\n### waterfall(tasks, [callback])\n\nRuns an array of functions in series, each passing their results to the next in\nthe array. However, if any of the functions pass an error to the callback, the\nnext function is not executed and the main callback is immediately called with\nthe error.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n* callback(err, [results]) - An optional callback to run once all the functions\n  have completed. This will be passed the results of the last task\'s callback.\n\n\n\n__Example__\n\n    async.waterfall([\n        function(callback){\n            callback(null, \'one\', \'two\');\n        },\n        function(arg1, arg2, callback){\n            callback(null, \'three\');\n        },\n        function(arg1, callback){\n            // arg1 now equals \'three\'\n            callback(null, \'done\');\n        }\n    ], function (err, result) {\n       // result now equals \'done\'    \n    });\n\n\n---------------------------------------\n\n<a name="queue" />\n### queue(worker, concurrency)\n\nCreates a queue object with the specified concurrency. Tasks added to the\nqueue will be processed in parallel (up to the concurrency limit). If all\nworkers are in progress, the task is queued until one is available. Once\na worker has completed a task, the task\'s callback is called.\n\n__Arguments__\n\n* worker(task, callback) - An asynchronous function for processing a queued\n  task.\n* concurrency - An integer for determining how many worker functions should be\n  run in parallel.\n\n__Queue objects__\n\nThe queue object returned by this function has the following properties and\nmethods:\n\n* length() - a function returning the number of items waiting to be processed.\n* concurrency - an integer for determining how many worker functions should be\n  run in parallel. This property can be changed after a queue is created to\n  alter the concurrency on-the-fly.\n* push(task, [callback]) - add a new task to the queue, the callback is called\n  once the worker has finished processing the task.\n  instead of a single task, an array of tasks can be submitted. the respective callback is used for every task in the list.\n* saturated - a callback that is called when the queue length hits the concurrency and further tasks will be queued\n* empty - a callback that is called when the last item from the queue is given to a worker\n* drain - a callback that is called when the last item from the queue has returned from the worker\n\n__Example__\n\n    // create a queue object with concurrency 2\n\n    var q = async.queue(function (task, callback) {\n        console.log(\'hello \' + task.name);\n        callback();\n    }, 2);\n\n\n    // assign a callback\n    q.drain = function() {\n        console.log(\'all items have been processed\');\n    }\n\n    // add some items to the queue\n\n    q.push({name: \'foo\'}, function (err) {\n        console.log(\'finished processing foo\');\n    });\n    q.push({name: \'bar\'}, function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n    // add some items to the queue (batch-wise)\n\n    q.push([{name: \'baz\'},{name: \'bay\'},{name: \'bax\'}], function (err) {\n        console.log(\'finished processing bar\');\n    });\n\n\n---------------------------------------\n\n<a name="auto" />\n### auto(tasks, [callback])\n\nDetermines the best order for running functions based on their requirements.\nEach function can optionally depend on other functions being completed first,\nand each function is run as soon as its requirements are satisfied. If any of\nthe functions pass an error to their callback, that function will not complete\n(so any other functions depending on it will not run) and the main callback\nwill be called immediately with the error. Functions also receive an object\ncontaining the results of functions which have completed so far.\n\n__Arguments__\n\n* tasks - An object literal containing named functions or an array of\n  requirements, with the function itself the last item in the array. The key\n  used for each function or array is used when specifying requirements. The\n  syntax is easier to understand by looking at the example.\n* callback(err, results) - An optional callback which is called when all the\n  tasks have been completed. The callback will receive an error as an argument\n  if any tasks pass an error to their callback. If all tasks complete\n  successfully, it will receive an object containing their results.\n\n__Example__\n\n    async.auto({\n        get_data: function(callback){\n            // async code to get some data\n        },\n        make_folder: function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        },\n        write_file: [\'get_data\', \'make_folder\', function(callback){\n            // once there is some data and the directory exists,\n            // write the data to a file in the directory\n            callback(null, filename);\n        }],\n        email_link: [\'write_file\', function(callback, results){\n            // once the file is written let\'s email a link to it...\n            // results.write_file contains the filename returned by write_file.\n        }]\n    });\n\nThis is a fairly trivial example, but to do this using the basic parallel and\nseries functions would look like this:\n\n    async.parallel([\n        function(callback){\n            // async code to get some data\n        },\n        function(callback){\n            // async code to create a directory to store a file in\n            // this is run at the same time as getting the data\n        }\n    ],\n    function(results){\n        async.series([\n            function(callback){\n                // once there is some data and the directory exists,\n                // write the data to a file in the directory\n            },\n            email_link: function(callback){\n                // once the file is written let\'s email a link to it...\n            }\n        ]);\n    });\n\nFor a complicated series of async tasks using the auto function makes adding\nnew tasks much easier and makes the code more readable.\n\n\n---------------------------------------\n\n<a name="iterator" />\n### iterator(tasks)\n\nCreates an iterator function which calls the next function in the array,\nreturning a continuation to call the next one after that. Its also possible to\n\'peek\' the next iterator by doing iterator.next().\n\nThis function is used internally by the async module but can be useful when\nyou want to manually control the flow of functions in series.\n\n__Arguments__\n\n* tasks - An array of functions to run, each function is passed a callback it\n  must call on completion.\n\n__Example__\n\n    var iterator = async.iterator([\n        function(){ sys.p(\'one\'); },\n        function(){ sys.p(\'two\'); },\n        function(){ sys.p(\'three\'); }\n    ]);\n\n    node> var iterator2 = iterator();\n    \'one\'\n    node> var iterator3 = iterator2();\n    \'two\'\n    node> iterator3();\n    \'three\'\n    node> var nextfn = iterator2.next();\n    node> nextfn();\n    \'three\'\n\n\n---------------------------------------\n\n<a name="apply" />\n### apply(function, arguments..)\n\nCreates a continuation function with some arguments already applied, a useful\nshorthand when combined with other control flow functions. Any arguments\npassed to the returned function are added to the arguments originally passed\nto apply.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to automatically apply when the\n  continuation is called.\n\n__Example__\n\n    // using apply\n\n    async.parallel([\n        async.apply(fs.writeFile, \'testfile1\', \'test1\'),\n        async.apply(fs.writeFile, \'testfile2\', \'test2\'),\n    ]);\n\n\n    // the same process without using apply\n\n    async.parallel([\n        function(callback){\n            fs.writeFile(\'testfile1\', \'test1\', callback);\n        },\n        function(callback){\n            fs.writeFile(\'testfile2\', \'test2\', callback);\n        },\n    ]);\n\nIt\'s possible to pass any number of additional arguments when calling the\ncontinuation:\n\n    node> var fn = async.apply(sys.puts, \'one\');\n    node> fn(\'two\', \'three\');\n    one\n    two\n    three\n\n---------------------------------------\n\n<a name="nextTick" />\n### nextTick(callback)\n\nCalls the callback on a later loop around the event loop. In node.js this just\ncalls process.nextTick, in the browser it falls back to setTimeout(callback, 0),\nwhich means other higher priority events may precede the execution of the callback.\n\nThis is used internally for browser-compatibility purposes.\n\n__Arguments__\n\n* callback - The function to call on a later loop around the event loop.\n\n__Example__\n\n    var call_order = [];\n    async.nextTick(function(){\n        call_order.push(\'two\');\n        // call_order now equals [\'one\',\'two]\n    });\n    call_order.push(\'one\')\n\n\n## Utils\n\n<a name="memoize" />\n### memoize(fn, [hasher])\n\nCaches the results of an async function. When creating a hash to store function\nresults against, the callback is omitted from the hash and an optional hash\nfunction can be used.\n\n__Arguments__\n\n* fn - the function you to proxy and cache results from.\n* hasher - an optional function for generating a custom hash for storing\n  results, it has all the arguments applied to it apart from the callback, and\n  must be synchronous.\n\n__Example__\n\n    var slow_fn = function (name, callback) {\n        // do something\n        callback(null, result);\n    };\n    var fn = async.memoize(slow_fn);\n\n    // fn can now be used as if it were slow_fn\n    fn(\'some name\', function () {\n        // callback\n    });\n\n<a name="unmemoize" />\n### unmemoize(fn)\n\nUndoes a memoized function, reverting it to the original, unmemoized\nform. Comes handy in tests.\n\n__Arguments__\n\n* fn - the memoized function\n\n<a name="log" />\n### log(function, arguments)\n\nLogs the result of an async function to the console. Only works in node.js or\nin browsers that support console.log and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.log is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, \'hello \' + name);\n        }, 1000);\n    };\n\n    node> async.log(hello, \'world\');\n    \'hello world\'\n\n\n---------------------------------------\n\n<a name="dir" />\n### dir(function, arguments)\n\nLogs the result of an async function to the console using console.dir to\ndisplay the properties of the resulting object. Only works in node.js or\nin browsers that support console.dir and console.error (such as FF and Chrome).\nIf multiple arguments are returned from the async function, console.dir is\ncalled on each argument in order.\n\n__Arguments__\n\n* function - The function you want to eventually apply all arguments to.\n* arguments... - Any number of arguments to apply to the function.\n\n__Example__\n\n    var hello = function(name, callback){\n        setTimeout(function(){\n            callback(null, {hello: name});\n        }, 1000);\n    };\n\n    node> async.dir(hello, \'world\');\n    {hello: \'world\'}\n\n\n---------------------------------------\n\n<a name="noConflict" />\n### noConflict()\n\nChanges the value of async back to its original value, returning a reference to the\nasync object.\n',
142 silly resolved     readmeFilename: 'README.md',
142 silly resolved     _id: 'async@0.1.22',
142 silly resolved     _from: 'async@0.1.x' } ]
143 info install trim@0.0.1 into /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap
144 info install optimist@0.3.5 into /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap
145 info install async@0.1.22 into /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap
146 info installOne trim@0.0.1
147 info installOne optimist@0.3.5
148 info installOne async@0.1.22
149 verbose from cache /home/tahu/.npm/trim/0.0.1/package/package.json
150 verbose from cache /home/tahu/.npm/optimist/0.3.5/package/package.json
151 verbose from cache /home/tahu/.npm/async/0.1.22/package/package.json
152 info /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/trim unbuild
153 verbose read json /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/trim/package.json
154 info /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist unbuild
155 verbose read json /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/package.json
156 info /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/async unbuild
157 verbose read json /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/async/package.json
158 verbose tar unpack /home/tahu/.npm/trim/0.0.1/package.tgz
159 verbose tar unpack /home/tahu/.npm/optimist/0.3.5/package.tgz
160 verbose tar unpack /home/tahu/.npm/async/0.1.22/package.tgz
161 silly lockFile ec484b70-odules-pathcap-node-modules-trim /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/trim
162 verbose lock /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/trim /home/tahu/.npm/ec484b70-odules-pathcap-node-modules-trim.lock
163 silly lockFile b6176731-es-pathcap-node-modules-optimist /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist
164 verbose lock /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist /home/tahu/.npm/b6176731-es-pathcap-node-modules-optimist.lock
165 silly lockFile 1c4dff9c-dules-pathcap-node-modules-async /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/async
166 verbose lock /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/async /home/tahu/.npm/1c4dff9c-dules-pathcap-node-modules-async.lock
167 silly gunzTarPerm modes [ '755', '644' ]
168 silly gunzTarPerm modes [ '755', '644' ]
169 silly gunzTarPerm modes [ '755', '644' ]
170 silly gunzTarPerm extractEntry package.json
171 silly gunzTarPerm extractEntry package.json
172 silly gunzTarPerm extractEntry package.json
173 silly gunzTarPerm extractEntry .npmignore
174 silly gunzTarPerm extractEntry index.js
175 silly gunzTarPerm extractEntry LICENSE
176 silly gunzTarPerm extractEntry x.js
177 silly gunzTarPerm extractEntry .npmignore
178 silly gunzTarPerm extractEntry README.md
179 silly gunzTarPerm extractEntry Readme.md
180 silly gunzTarPerm extractEntry component.json
181 silly gunzTarPerm extractEntry index.js
182 silly gunzTarPerm extractEntry .travis.yml
183 silly gunzTarPerm extractEntry LICENSE
184 silly gunzTarPerm extractEntry index.js
185 silly gunzTarPerm extractEntry README.markdown
186 silly gunzTarPerm extractEntry History.md
187 silly gunzTarPerm extractEntry Makefile
188 silly gunzTarPerm extractEntry .gitmodules
189 silly gunzTarPerm extractEntry Makefile
190 silly gunzTarPerm extractEntry example/line_count_wrap.js
191 silly gunzTarPerm extractEntry example/usage-options.js
192 silly gunzTarPerm extractEntry lib/async.js
193 silly gunzTarPerm extractEntry example/string.js
194 silly gunzTarPerm extractEntry example/default_hash.js
195 silly gunzTarPerm extractEntry example/xup.js
196 silly gunzTarPerm extractEntry example/bool.js
197 silly gunzTarPerm extractEntry example/short.js
198 silly gunzTarPerm extractEntry example/boolean_single.js
199 silly gunzTarPerm extractEntry example/boolean_double.js
200 silly gunzTarPerm extractEntry example/reflect.js
201 silly gunzTarPerm extractEntry example/divide.js
202 silly gunzTarPerm extractEntry example/line_count.js
203 silly gunzTarPerm extractEntry example/line_count_options.js
204 silly gunzTarPerm extractEntry example/nonopt.js
205 silly gunzTarPerm extractEntry example/default_singles.js
206 silly gunzTarPerm extractEntry test/_.js
207 silly gunzTarPerm extractEntry test/parse.js
208 silly gunzTarPerm extractEntry test/usage.js
209 silly gunzTarPerm extractEntry test/_/bin.js
210 silly gunzTarPerm extractEntry test/_/argv.js
211 verbose read json /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/trim/package.json
212 silly lockFile ec484b70-odules-pathcap-node-modules-trim /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/trim
213 info preinstall trim@0.0.1
214 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/trim/package.json
215 verbose readDependencies using package.json deps
216 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/trim/package.json
217 verbose read json /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/async/package.json
218 verbose readDependencies using package.json deps
219 silly resolved []
220 verbose about to build /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/trim
221 info build /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/trim
222 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/trim/package.json
223 silly lockFile 1c4dff9c-dules-pathcap-node-modules-async /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/async
224 verbose linkStuff [ true,
224 verbose linkStuff   '/home/tahu/.nvm/v0.8.15/lib/node_modules',
224 verbose linkStuff   false,
224 verbose linkStuff   '/home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules' ]
225 info linkStuff trim@0.0.1
226 verbose linkBins trim@0.0.1
227 verbose linkMans trim@0.0.1
228 verbose rebuildBundles trim@0.0.1
229 info install trim@0.0.1
230 info postinstall trim@0.0.1
231 info preinstall async@0.1.22
232 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/async/package.json
233 verbose readDependencies using package.json deps
234 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/async/package.json
235 verbose readDependencies using package.json deps
236 silly resolved []
237 verbose about to build /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/async
238 info build /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/async
239 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/async/package.json
240 verbose linkStuff [ true,
240 verbose linkStuff   '/home/tahu/.nvm/v0.8.15/lib/node_modules',
240 verbose linkStuff   false,
240 verbose linkStuff   '/home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules' ]
241 info linkStuff async@0.1.22
242 verbose linkBins async@0.1.22
243 verbose linkMans async@0.1.22
244 verbose rebuildBundles async@0.1.22
245 info install async@0.1.22
246 info postinstall async@0.1.22
247 verbose read json /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/package.json
248 silly lockFile b6176731-es-pathcap-node-modules-optimist /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist
249 info preinstall optimist@0.3.5
250 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/package.json
251 verbose readDependencies using package.json deps
252 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/package.json
253 verbose readDependencies using package.json deps
254 verbose cache add [ 'wordwrap@~0.0.2', null ]
255 silly cache add name=undefined spec="wordwrap@~0.0.2" args=["wordwrap@~0.0.2",null]
256 verbose parsed url { pathname: 'wordwrap@~0.0.2',
256 verbose parsed url   path: 'wordwrap@~0.0.2',
256 verbose parsed url   href: 'wordwrap@~0.0.2' }
257 silly cache add name="wordwrap" spec="~0.0.2" args=["wordwrap","~0.0.2"]
258 verbose parsed url { pathname: '~0.0.2', path: '~0.0.2', href: '~0.0.2' }
259 verbose addNamed [ 'wordwrap', '~0.0.2' ]
260 verbose addNamed [ null, '>=0.0.2- <0.1.0-' ]
261 silly lockFile 8bd42136-wordwrap-0-0-2 wordwrap@~0.0.2
262 verbose lock wordwrap@~0.0.2 /home/tahu/.npm/8bd42136-wordwrap-0-0-2.lock
263 silly addNameRange { name: 'wordwrap', range: '>=0.0.2- <0.1.0-', hasData: false }
264 verbose url raw wordwrap
265 verbose url resolving [ 'https://registry.npmjs.org/', './wordwrap' ]
266 verbose url resolved https://registry.npmjs.org/wordwrap
267 info trying registry request attempt 1 at 10:17:23
268 verbose etag "K7IPQ9XBILHUPDJLPQWSTET7"
269 http GET https://registry.npmjs.org/wordwrap
270 http 304 https://registry.npmjs.org/wordwrap
271 silly registry.get cb [ 304,
271 silly registry.get   { server: 'CouchDB/1.2.0 (Erlang OTP/R15B)',
271 silly registry.get     etag: '"K7IPQ9XBILHUPDJLPQWSTET7"',
271 silly registry.get     date: 'Fri, 07 Dec 2012 08:16:38 GMT',
271 silly registry.get     'content-length': '0' } ]
272 verbose etag wordwrap from cache
273 silly addNameRange number 2 { name: 'wordwrap', range: '>=0.0.2- <0.1.0-', hasData: true }
274 silly addNameRange versions [ 'wordwrap', [ '0.0.1', '0.0.2' ] ]
275 verbose addNamed [ 'wordwrap', '0.0.2' ]
276 verbose addNamed [ '0.0.2', '0.0.2' ]
277 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
278 verbose lock wordwrap@0.0.2 /home/tahu/.npm/24a694c8-wordwrap-0-0-2.lock
279 verbose read json /home/tahu/.npm/wordwrap/0.0.2/package/package.json
280 silly lockFile 24a694c8-wordwrap-0-0-2 wordwrap@0.0.2
281 silly lockFile 8bd42136-wordwrap-0-0-2 wordwrap@~0.0.2
282 silly resolved [ { name: 'wordwrap',
282 silly resolved     description: 'Wrap those words. Show them at what columns to start and stop.',
282 silly resolved     version: '0.0.2',
282 silly resolved     repository:
282 silly resolved      { type: 'git',
282 silly resolved        url: 'git://github.com/substack/node-wordwrap.git' },
282 silly resolved     main: './index.js',
282 silly resolved     keywords: [ 'word', 'wrap', 'rule', 'format', 'column' ],
282 silly resolved     directories: { lib: '.', example: 'example', test: 'test' },
282 silly resolved     scripts: { test: 'expresso' },
282 silly resolved     devDependencies: { expresso: '=0.7.x' },
282 silly resolved     engines: { node: '>=0.4.0' },
282 silly resolved     license: 'MIT/X11',
282 silly resolved     author:
282 silly resolved      { name: 'James Halliday',
282 silly resolved        email: 'mail@substack.net',
282 silly resolved        url: 'http://substack.net' },
282 silly resolved     readme: 'wordwrap\n========\n\nWrap your words.\n\nexample\n=======\n\nmade out of meat\n----------------\n\nmeat.js\n\n    var wrap = require(\'wordwrap\')(15);\n    console.log(wrap(\'You and your whole family are made out of meat.\'));\n\noutput:\n\n    You and your\n    whole family\n    are made out\n    of meat.\n\ncentered\n--------\n\ncenter.js\n\n    var wrap = require(\'wordwrap\')(20, 60);\n    console.log(wrap(\n        \'At long last the struggle and tumult was over.\'\n        + \' The machines had finally cast off their oppressors\'\n        + \' and were finally free to roam the cosmos.\'\n        + \'\\n\'\n        + \'Free of purpose, free of obligation.\'\n        + \' Just drifting through emptiness.\'\n        + \' The sun was just another point of light.\'\n    ));\n\noutput:\n\n                        At long last the struggle and tumult\n                        was over. The machines had finally cast\n                        off their oppressors and were finally\n                        free to roam the cosmos.\n                        Free of purpose, free of obligation.\n                        Just drifting through emptiness. The\n                        sun was just another point of light.\n\nmethods\n=======\n\nvar wrap = require(\'wordwrap\');\n\nwrap(stop), wrap(start, stop, params={mode:"soft"})\n---------------------------------------------------\n\nReturns a function that takes a string and returns a new string.\n\nPad out lines with spaces out to column `start` and then wrap until column\n`stop`. If a word is longer than `stop - start` characters it will overflow.\n\nIn "soft" mode, split chunks by `/(\\S+\\s+/` and don\'t break up chunks which are\nlonger than `stop - start`, in "hard" mode, split chunks with `/\\b/` and break\nup chunks longer than `stop - start`.\n\nwrap.hard(start, stop)\n----------------------\n\nLike `wrap()` but with `params.mode = "hard"`.\n',
282 silly resolved     readmeFilename: 'README.markdown',
282 silly resolved     _id: 'wordwrap@0.0.2',
282 silly resolved     _from: 'wordwrap@~0.0.2' } ]
283 info install wordwrap@0.0.2 into /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist
284 info installOne wordwrap@0.0.2
285 verbose from cache /home/tahu/.npm/wordwrap/0.0.2/package/package.json
286 info /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/node_modules/wordwrap unbuild
287 verbose read json /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/node_modules/wordwrap/package.json
288 verbose tar unpack /home/tahu/.npm/wordwrap/0.0.2/package.tgz
289 silly lockFile 86ef7949-s-optimist-node-modules-wordwrap /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/node_modules/wordwrap
290 verbose lock /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/node_modules/wordwrap /home/tahu/.npm/86ef7949-s-optimist-node-modules-wordwrap.lock
291 silly gunzTarPerm modes [ '755', '644' ]
292 silly gunzTarPerm extractEntry package.json
293 silly gunzTarPerm modified mode [ 'package.json', 438, 420 ]
294 silly gunzTarPerm extractEntry .npmignore
295 silly gunzTarPerm modified mode [ '.npmignore', 438, 420 ]
296 silly gunzTarPerm extractEntry index.js
297 silly gunzTarPerm modified mode [ 'index.js', 438, 420 ]
298 silly gunzTarPerm extractEntry README.markdown
299 silly gunzTarPerm modified mode [ 'README.markdown', 438, 420 ]
300 silly gunzTarPerm extractEntry example/center.js
301 silly gunzTarPerm modified mode [ 'example/center.js', 438, 420 ]
302 silly gunzTarPerm extractEntry example/meat.js
303 silly gunzTarPerm modified mode [ 'example/meat.js', 438, 420 ]
304 silly gunzTarPerm extractEntry test/wrap.js
305 silly gunzTarPerm modified mode [ 'test/wrap.js', 438, 420 ]
306 silly gunzTarPerm extractEntry test/break.js
307 silly gunzTarPerm modified mode [ 'test/break.js', 438, 420 ]
308 silly gunzTarPerm extractEntry test/idleness.txt
309 silly gunzTarPerm modified mode [ 'test/idleness.txt', 438, 420 ]
310 verbose read json /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/node_modules/wordwrap/package.json
311 silly lockFile 86ef7949-s-optimist-node-modules-wordwrap /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/node_modules/wordwrap
312 info preinstall wordwrap@0.0.2
313 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/node_modules/wordwrap/package.json
314 verbose readDependencies using package.json deps
315 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/node_modules/wordwrap/package.json
316 verbose readDependencies using package.json deps
317 silly resolved []
318 verbose about to build /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/node_modules/wordwrap
319 info build /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/node_modules/wordwrap
320 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/node_modules/wordwrap/package.json
321 verbose linkStuff [ true,
321 verbose linkStuff   '/home/tahu/.nvm/v0.8.15/lib/node_modules',
321 verbose linkStuff   false,
321 verbose linkStuff   '/home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/node_modules' ]
322 info linkStuff wordwrap@0.0.2
323 verbose linkBins wordwrap@0.0.2
324 verbose linkMans wordwrap@0.0.2
325 verbose rebuildBundles wordwrap@0.0.2
326 info install wordwrap@0.0.2
327 info postinstall wordwrap@0.0.2
328 verbose about to build /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist
329 info build /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist
330 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules/optimist/package.json
331 verbose linkStuff [ true,
331 verbose linkStuff   '/home/tahu/.nvm/v0.8.15/lib/node_modules',
331 verbose linkStuff   false,
331 verbose linkStuff   '/home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/node_modules' ]
332 info linkStuff optimist@0.3.5
333 verbose linkBins optimist@0.3.5
334 verbose linkMans optimist@0.3.5
335 verbose rebuildBundles optimist@0.3.5
336 verbose rebuildBundles [ 'wordwrap' ]
337 info install optimist@0.3.5
338 info postinstall optimist@0.3.5
339 verbose about to build /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap
340 info build /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap
341 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/package.json
342 verbose linkStuff [ true,
342 verbose linkStuff   '/home/tahu/.nvm/v0.8.15/lib/node_modules',
342 verbose linkStuff   true,
342 verbose linkStuff   '/home/tahu/.nvm/v0.8.15/lib/node_modules' ]
343 info linkStuff pathcap@0.0.1
344 verbose linkBins pathcap@0.0.1
345 verbose link bins [ { scsync: './bin/pathcap' },
345 verbose link bins   '/home/tahu/.nvm/v0.8.15/bin',
345 verbose link bins   true ]
346 verbose linkMans pathcap@0.0.1
347 verbose rebuildBundles pathcap@0.0.1
348 verbose rebuildBundles [ 'optimist', 'trim', 'async' ]
349 info /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap unbuild
350 verbose from cache /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap/package.json
351 info preuninstall pathcap@0.0.1
352 info uninstall pathcap@0.0.1
353 verbose true,/home/tahu/.nvm/v0.8.15/lib/node_modules,/home/tahu/.nvm/v0.8.15/lib/node_modules unbuild pathcap@0.0.1
354 verbose /home/tahu/.nvm/v0.8.15/bin,[object Object] binRoot
355 error error rolling back Error: Refusing to delete: /home/tahu/.nvm/v0.8.15/bin/scsync not in /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap
355 error error rolling back     at clobberFail (/home/tahu/.nvm/v0.8.15/lib/node_modules/npm/lib/utils/gently-rm.js:41:12)
355 error error rolling back     at next (/home/tahu/.nvm/v0.8.15/lib/node_modules/npm/lib/utils/gently-rm.js:27:14)
355 error error rolling back     at /home/tahu/.nvm/v0.8.15/lib/node_modules/npm/lib/utils/gently-rm.js:36:12
355 error error rolling back     at Object.oncomplete (fs.js:297:15)
355 error error rolling back  pathcap@0.0.1 { [Error: Refusing to delete: /home/tahu/.nvm/v0.8.15/bin/scsync not in /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap] code: 'EEXIST', path: '/home/tahu/.nvm/v0.8.15/bin/scsync' }
356 error Refusing to delete: /home/tahu/.nvm/v0.8.15/bin/scsync not in /home/tahu/.nvm/v0.8.15/lib/node_modules/pathcap
File exists: /home/tahu/.nvm/v0.8.15/bin/scsync
Move it away, and try again.
357 error System Linux 2.6.32-5-686
358 error command "/home/tahu/.nvm/v0.8.15/bin/node" "/home/tahu/.nvm/v0.8.15/bin/npm" "install" "-g" "pathcap"
359 error cwd /home/tahu/Desktop/PATHCAP
360 error node -v v0.8.15
361 error npm -v 1.1.66
362 error path /home/tahu/.nvm/v0.8.15/bin/scsync
363 error code EEXIST
364 verbose exit [ 1, true ]
